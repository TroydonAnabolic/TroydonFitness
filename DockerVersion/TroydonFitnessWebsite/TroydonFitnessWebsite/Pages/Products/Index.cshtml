@page
@model TroydonFitnessWebsite.Pages.Products.IndexModel

@{
    ViewData["Title"] = "Products";
    Layout = "~/Pages/Shared/_ProductsLayout.cshtml";
}

<h1>Products</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<form asp-page="./Index" method="get">
    @* By using method type get, we are able to see the query string in the URL and book mark the page with search criteria, also as per W3C guideliness, if we are not inputting data in server use GET *@
    <div class="form-actions no-color">
        <p>
            Find by product title or description:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.IdSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Products[0].ProductID)
                </a>   @* TODO: PK and FK Visible only to admin users *@
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.IdSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Products[0].ProductID)
                </a>   @* TODO: PK and FK Visible only to admin users *@
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.TitleSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Products[0].Title)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Products[0].ShortDescription)
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.PriceSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Products[0].Price)
                </a>
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.QuantitySort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Products[0].Quantity)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Products[0].HasStock)
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Products[0].LastUpdated)
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Products)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ProductID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ShortDescription)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HasStock)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastUpdated)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.ProductID">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.ProductID">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.ProductID">Delete</a>
            </td>
            <td>
                    <a asp-page="./Edit" asp-route-id="@item.ProductID">Edit</a>
                    <text> | </text>
         

                <a asp-page="./Details" asp-route-id="@item.ProductID">Details</a>


                    <text> | </text>
                    <a asp-page="./Delete" asp-route-id="@item.ProductID">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>

@* Paging UI *@

@{
    var prevDisabled = !Model.Products.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.Products.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Products.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Products.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-primary @nextDisabled">
    Next
</a>
