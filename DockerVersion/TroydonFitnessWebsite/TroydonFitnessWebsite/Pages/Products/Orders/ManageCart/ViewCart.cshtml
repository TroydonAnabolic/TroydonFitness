@page
@model TroydonFitnessWebsite.Pages.Products.Orders.ManageCart.ViewCartModel
@inject UserManager<TroydonFitnessWebsiteUser> UserManager

@{
    ViewData["Title"] = "Index";
    Layout = "~/Pages/Shared/_Layout.cshtml";
    Layout = "~/Pages/Shared/_ProductsLayout.cshtml";
}


<p>
    <a asp-page="/Products/MainProductPage">Add more items</a>
</p>

<form asp-page="./ViewCart" method="get">
    @* By using method type get, we are able to see the query string in the URL and book mark the page with search criteria, also as per W3C guideliness, if we are not inputting data in server use GET *@
    <div class="form-actions no-color">
        <p>
            Find by product title or description:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-primary" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>

            @* Display cart items to display depending on the type using the below *@
            @{ if (UserManager.GetUserAsync(User).Result.IsMasterAdmin)
                {
                    <th>
                        <a asp-page="./ViewCart" asp-route-sortOrder="@Model.CartIdSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.CartItems[0].CartID)
                        </a>
                    </th>
                    <th>
                        <a asp-page="./ViewCart" asp-route-sortOrder="@Model.IdSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.CartItems[0].Product)
                        </a>
                    </th>
                    <th>
                        <a asp-page="./ViewCart" asp-route-sortOrder="@Model.IdSort"
                           asp-route-currentFilter="@Model.CurrentFilter">
                            @Html.DisplayNameFor(model => model.CartItems[0].PurchaserID)
                        </a>
                    </th>
                }
            }

            <th>
                <a asp-page="./ViewCart" asp-route-sortOrder="@Model.TitleSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.CartItems[0].Product.Title)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CartItems[0].TrainingRoutine.PersonalTrainingSession)
            </th>
            <th>
                <a asp-page="./ViewCart" asp-route-sortOrder="@Model.PriceSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.CartItems[0].TrainingRoutine.PersonalTrainingSession.Product.Price)
                </a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CartItems[0].Quantity)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.CartItems)
        {
            <tr>
                @{ if (UserManager.GetUserAsync(User).Result.IsMasterAdmin)
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.CartID)
                        </td>
                        <td>
                            @* Determine which ID to display based on the type of order *@
                            @if (Model.CartItems[0].TrainingRoutine != null)
                            {
                                @Html.DisplayNameFor(model => model.CartItems[0].TrainingRoutine)
                                <hr />
                                @Html.DisplayFor(modelItem => item.TrainingRoutineID)
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.PurchaserID)
                        </td>
                    }
                }

                <td>
                    @* Display data access paths depending on the type of oder, e.g if training routine is not null, then display it's data access route tree *@
                    @if (Model.CartItems[0].TrainingRoutine != null)
                    {
                        @Html.DisplayFor(modelItem => item.TrainingRoutine.PersonalTrainingSession.Product.Title)
                    }
                    @if (Model.CartItems[0].Diet != null)
                    {
                        @Html.DisplayFor(modelItem => item.Diet.PersonalTrainingSession.Product.Title)
                    }
                    @if (Model.CartItems[0].Supplement != null)
                    {
                        @Html.DisplayFor(modelItem => item.Supplement.Product.Title)
                    }
                </td>
                <td>
                    @* Display data access paths depending on the type of oder, e.g if training routine is not null, then display it's data access route tree *@
                    @if (Model.CartItems[0].TrainingRoutine != null)
                    {
                        <img style="width:7rem;height:7rem; object-fit:cover;" src="data:image/*;base64,@(Convert.ToBase64String(item.TrainingRoutine.PersonalTrainingSession.PtProductPicture))">
                    }
                    @if (Model.CartItems[0].Diet != null)
                    {
                        <img style="width:7rem;height:7rem; object-fit:cover;" src="data:image/*;base64,@(Convert.ToBase64String(item.Diet.PersonalTrainingSession.PtProductPicture))">
                    }
                    @if (Model.CartItems[0].Supplement != null)
                    {
                        // TODO: add supplement image
                        @*<img style="width:7rem;height:7rem; object-fit:cover;" src="data:image/*;base64,@(Convert.ToBase64String(item.Supplement.SupplementImage))">*@

                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TrainingRoutine.PersonalTrainingSession.Product.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td>
                    <a asp-area="" asp-page="./EditCartItem" asp-route-id="@item.CartID">Edit Cart Item</a> |
                    <a asp-area="" asp-page="./CartItemDetails" asp-route-id="@item.CartID">Cart Item Details</a> |
                    <a asp-area="" asp-page="./DeleteCartItem" asp-route-id="@item.CartID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<a asp-area="" asp-page="/Products/Orders/CreateOrder" class="btn btn-primary btn-lg btn-block">Continue To Checkout</a>

@* Your detals *@


@* TODO: Create functionality to create order based on everything in the cart, make all cart details float right and cart left *@
@*<button type="button" class="btn btn-primary btn-lg btn-block" style="margin-top:10rem;">Checkout</button>*@
@*<div class="row create-order hidden">
        <div class="col-md-4">
            <form method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            </form>
            <input type="submit" value="Checkout" class="btn btn-primary btn-lg btn-block" style="margin-top:10rem;" />

        </div>
    </div>*@
